{:openapi "3.0.2"
 :info
 {:version "1.0.1"
  :title "Card"
  :description
  "Zettelkasten, Kanban"
  :contact
  {:name "Malcolm Sparks"
   :email "mal@juxt.pro"
   :url "https://juxt.pro"}}

 :servers [{:url "/card"}]

 :paths
 {"/cards/"
  {:post
   {:operationId "postCard"
    :juxt.site.alpha/post-fn juxt.apex.alpha.helpers/post-request-body
    :requestBody
    {:required true
     :content {"application/json" {:schema {"$ref" "#/components/schemas/Card"}}}}
    :responses
    {201 {}}}}

  "/cards/{id}"
  {:parameters
   [{:name "id"
     :in "path"
     :required true
     :description "Card identifier"
     :schema {:type "string"}}]

   :get {:operationId "getCard"

         :responses
         {200 {:content
               {"application/json"
                {:schema {"$ref" "#/components/schemas/Card"}}
                "text/html;charset=utf-8" {}}}
          }}

   :put {:operationId "putCard"
         :requestBody
         {:required true
          :content {"application/json" {:schema {"$ref" "#/components/schemas/Card"}}}}
         :responses
         {201 {}
          204 {}}}
   }

  "/components/{id}"
  {:parameters
   [{:name "id"
     :in "path"
     :required true
     :description "Card identifier"
     :schema {:type "string"}}]

   :get {:operationId "getCardComponents"
         :description "From the card corresponding to the id parameter, return
         all the content component entities of the card, including the card
         itself."
         :responses
         {200
          {:juxt.site.alpha/query
           #juxt.site.alpha/as-str
           {:find [(pull component [*])]
            :where [[root :crux.db/id root-uri]

                    ;; We construct the card uri from the id
                    [(str
                      {:juxt.site.alpha/ref [:juxt.site.alpha/base-uri]}
                      "/card/cards/"
                      {:in "path" :name "id"}) root-uri]

                    [component :crux.db/id]

                    (is-ancestor-of? root component)]
            :rules [
                    [(is-ancestor-of? ?parent ?child)
                     [?parent :content ?child]]
                    [(is-ancestor-of? ?ancestor ?child)
                     [?parent :content ?child]
                     (is-ancestor-of? ?ancestor ?parent)]
                    [(is-ancestor-of? ?ancestor ?child)
                     [(= ?ancestor ?child)]]]}
           :juxt.site.alpha/extract-first-projection? true

           :content
           {"application/json"
            {:schema {"$ref" "#/components/schemas/Card"}}}}}}

   }}

 :components
 {:schemas
  {"Card"
   {:type "object"
    :juxt.jinx.alpha/keyword-mappings {"type" "juxt.site.alpha/type"}
    :properties
    {"type" {:const "Card"}
     "priority" {:type "number"}
     "deadline" {:type "string"
                 :juxt.jinx.alpha/as "inst"}}}}}}

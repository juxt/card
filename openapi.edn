{:openapi "3.0.2"
 :info
 {:version "1.0.2"
  :title "Card"
  :description
  "Zettelkasten, Kanban"
  :contact
  {:name "Malcolm Sparks"
   :email "mal@juxt.pro"
   :url "https://juxt.pro"}}

 :servers [{:url "/card"}]

 :paths
 {"/cards/"
  {:post
   {:operationId "postCard"
    :juxt.site.alpha/post-fn juxt.apex.alpha.helpers/post-request-body
    :requestBody
    {:required true
     :content {"application/json" {:schema {"$ref" "#/components/schemas/Card"}}}}
    :responses
    {201 {}}}

   :get
   {:responses
    {200
     {:juxt.site.alpha/query
      #juxt.site.alpha/as-str
      {:find [(pull e [*]) #_(pull r [*])]
       :keys [card #_request]
       :where [;;[e :juxt.card.alpha/title]
               [e :juxt.card.alpha/children]
               ;;[e :juxt.site.alpha/request r]
               #_[(identity {:juxt.site.alpha/ref [:juxt.pass.alpha/subject]}) subject]
               ]}
      :content
      {"application/json" {}}}}}}

  "/cards/{id}"
  {:parameters
   [{:name "id"
     :in "path"
     :required true
     :description "Card identifier"
     :schema {:type "string"}}]

   :get {:operationId "getCard"

         :responses
         {200 {:content
               {"application/json"
                {:schema {"$ref" "#/components/schemas/Card"}}
                "text/html;charset=utf-8" {}}}}}

   :put {:operationId "putCard"
         :requestBody
         {:required true
          :content {"application/json" {:schema {"$ref" "#/components/schemas/Card"}}}}
         :responses
         {201 {}
          204 {}}}}

  "/actions/"
  {:get
   {:responses
    {200
     {:juxt.site.alpha/query
      ;; TODO: What if an action is contained by multiple parents? We should run
      ;; 'distinct' over the parents.
      #juxt.site.alpha/as-str
      {:find [(pull action [*]) parent]
       :keys [action parent]
       :where [[parent :juxt.card.alpha/children action]
               [action :juxt.card.alpha/status]]}
      :content
      {"application/json" {}}}}}}

  "/components/{id}"
  {:description "Pull out a card and all its descendant components."
   :parameters
   [{:name "id"
     :in "path"
     :required true
     :description "Card identifier"
     :schema {:type "string"}}]

   :get {:operationId "getCardComponents"
         :description "From the card corresponding to the id parameter, return
         all the content component entities of the card, including the card
         itself."
         :responses
         {200
          {:juxt.site.alpha/query
           #juxt.site.alpha/as-str
           {:find [(pull component [*])]
            :where [[root :crux.db/id root-uri]

                    ;; We construct the card uri from the id
                    [(str
                      {:juxt.site.alpha/ref [:juxt.site.alpha/base-uri]}
                      "/card/cards/"
                      {:in "path" :name "id"}) root-uri]

                    [component :crux.db/id]

                    (is-ancestor-of? root component)]
            :rules [
                    [(is-ancestor-of? ?ancestor ?child)
                     [(= ?ancestor ?child)]]
                    [(is-ancestor-of? ?parent ?child)
                     [?parent :juxt.card.alpha/children ?child]]
                    [(is-ancestor-of? ?ancestor ?child)
                     [?parent :juxt.card.alpha/children ?child]
                     (is-ancestor-of? ?ancestor ?parent)]
                    ;; Finally we consider all the content nodes
                    [(is-ancestor-of? ?ancestor ?child)
                     [?parent :juxt.card.alpha/content ?child]
                     (is-ancestor-of? ?ancestor ?parent)]
                    ]}
           :juxt.site.alpha/extract-first-projection? true

           :content
           {"application/json"
            {:schema {"$ref" "#/components/schemas/Card"}}}}}}}}

 :components
 {:schemas
  {"Card"
   {:type "object"
    :properties
    {"juxt.card.alpha/priority" {:type "number"}
     "juxt.card.alpha/deadline" {:type "string"
                                 :juxt.jinx.alpha/as "inst"}}}}}}
